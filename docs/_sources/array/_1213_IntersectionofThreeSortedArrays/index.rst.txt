=====================================
 1213 Intersectionofthreesortedarrays
=====================================

Java Solution
-------------

.. code-block:: java

   package com.leetcode.array;
   
   import java.util.ArrayList;
   import java.util.List;
   
   /**
    * @Date: 06/20/2020
    * @Description: three pointers
    **/
   public class _1213_IntersectionofThreeSortedArrays {
   
       // time:O(len1 + len2 + len3) space:O(max(len1, len2, len3))
       public List<Integer> arraysIntersection(int[] arr1, int[] arr2, int[] arr3) {
           // three pointers?
           int i = 0, j = 0, k = 0;
           List<Integer> res = new ArrayList<>();
           while (i < arr1.length && j < arr2.length && k < arr3.length) {
               int min = Math.min(arr1[i], Math.min(arr2[j], arr3[k]));
               if (arr1[i] == min && arr2[j] == min && arr3[k] == min) {
                   res.add(arr1[i]);
               }
               if (arr1[i] == min) {
                   i++;
               }
               if (arr2[j] == min) {
                   j++;
               }
               if (arr3[k] == min) {
                   k++;
               }
           }
           return res;
       }
   }
   

Py Solution
-----------

.. code-block:: py

   from typing import List
   
   
   class Solution:
       def arraysIntersection(
           self, arr1: List[int], arr2: List[int], arr3: List[int]
       ) -> List[int]:
           p1 = p2 = p3 = 0
           res = []
           while p1 < len(arr1) and p2 < len(arr2) and p3 < len(arr3):
               curr_min = min(arr1[p1], arr2[p2], arr3[p3])
               if arr1[p1] == arr2[p2] == arr3[p3]:
                   res.append(arr1[p1])
               if arr1[p1] == curr_min:
                   p1 += 1
               if arr2[p2] == curr_min:
                   p2 += 1
               if arr3[p3] == curr_min:
                   p3 += 1
           return res
   

