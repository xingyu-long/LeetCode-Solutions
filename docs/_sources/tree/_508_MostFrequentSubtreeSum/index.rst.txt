===========================
 508 Mostfrequentsubtreesum
===========================

Java Solution
-------------

.. code-block:: java

   package com.leetcode.tree;
   
   import com.leetcode.common.TreeNode;
   
   import java.util.ArrayList;
   import java.util.HashMap;
   import java.util.List;
   import java.util.Map;
   
   public class _508_MostFrequentSubtreeSum {
       public Map<Integer, Integer> map;
       public int max;
   
       public int[] findFrequentTreeSum(TreeNode root) {
           map = new HashMap<>();
           max = 0;
           dfs(root);
           List<Integer> list = new ArrayList<>();
           for (int key : map.keySet()) {
               if (map.get(key) == max) {
                   list.add(key);
               }
           }
           int[] res = new int[list.size()];
           for (int i = 0; i < list.size(); i++) {
               res[i] = list.get(i);
           }
           return res;
       }
   
       public int dfs(TreeNode root) {
           if (root == null) {
               return 0;
           }
           int left = dfs(root.left);
           int right = dfs(root.right);
           int sum = left + right + root.val;
           map.put(sum, map.getOrDefault(sum, 0) + 1);
           max = Math.max(max, map.get(sum));
           return sum;
       }
   }
   

