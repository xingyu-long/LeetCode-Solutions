================================
 144 Binarytreepreordertraversal
================================

Java Solution
-------------

.. code-block:: java

   /*
    * @Date: 2019-09-11 16:18:09
    * @LastEditors: Clark long
    * @LastEditTime: 2020-03-21 10:25:30
    */
   package com.leetcode.tree.preorder;
   
   import com.leetcode.common.TreeNode;
   
   import java.util.ArrayList;
   import java.util.List;
   import java.util.Stack;
   
   public class _144_BinaryTreePreorderTraversal {
       // time: O(n) space:O(n)
       public static List<Integer> preorderTraversal(TreeNode root) {
           List<Integer> res = new ArrayList<>();
           if (root == null) return res;
           helper(res, root);
           return res;
       }
   
       public static void helper(List<Integer> res, TreeNode root) {
           if (root == null) return;
           res.add(root.val);
           helper(res, root.left);
           helper(res, root.right);
       }
   
       // 可以利用非递归的解法
       public static void helper2(List<Integer> res, TreeNode root) {
           if (root == null) return;
           Stack<TreeNode> stack = new Stack<>();
           stack.push(root);
           while (!stack.isEmpty()) {
               TreeNode cur = stack.pop();
               res.add(cur.val);
               if (cur.right != null) stack.push(cur.right);
               if (cur.left != null) stack.push(cur.left);
           }
       }
       public static void main(String[] args) {
           TreeNode root = new TreeNode(1);
           root.left = null;
           root.right = new TreeNode(2);
           TreeNode right = root.right;
           right.left = new TreeNode(3);
           System.out.println(preorderTraversal(root).toString());
       }
   }
   

