==============
 460 Lfu Cache
==============

Java Solution
-------------

.. code-block:: java

   package com.leetcode.ood.doubly_linkedlist;
   
   import java.util.HashMap;
   import java.util.LinkedHashSet;
   import java.util.Map;
   
   /**
    * @Date: 09/28/2020, 10/26/2020
    * @Description: Design, LinkedHashSet
    **/
   public class _460_LFUCache {
       Map<Integer, Integer> map;
       Map<Integer, LinkedHashSet<Integer>> freqToKey;
       Map<Integer, Integer> keyToFreq;
   
       int size;
       int min;
   
       public _460_LFUCache(int capacity) {
           map = new HashMap<>();
           freqToKey = new HashMap<>();
           keyToFreq = new HashMap<>();
           // 先预备一个，放在这。
           freqToKey.put(1, new LinkedHashSet<>());
   
           size = capacity;
           min = -1;
       }
   
       public int get(int key) {
           if (!map.containsKey(key)) {
               return -1;
           }
   
           int freq = keyToFreq.get(key);
           keyToFreq.put(key, freq + 1);
           freqToKey.get(freq).remove(key);
           // find the next possible number with smallest freq
           if (freq == min && freqToKey.get(freq).size() == 0) {
               min++;
           }
           freqToKey.putIfAbsent(freq + 1, new LinkedHashSet<>());
           freqToKey.get(freq + 1).add(key);
           return map.get(key);
       }
   
       public void put(int key, int value) {
           if (size <= 0) {
               return;
           }
   
           if (map.containsKey(key)) {
               // update value and freq
               map.put(key, value);
               get(key);
           } else {
               if (map.size() >= size) {
                   int removedKey = freqToKey.get(min).iterator().next();
                   freqToKey.get(min).remove(removedKey);
                   map.remove(removedKey);
                   keyToFreq.remove(removedKey);
               }
   
               map.put(key, value);
               keyToFreq.put(key, 1);
               min = 1;
               freqToKey.get(min).add(key);
           }
       }
   }
   

Py Solution
-----------

.. code-block:: py

   from collections import defaultdict, OrderedDict
   
   
   class Node:
       def __init__(self, key, val, freq=1):
           self.key = key
           self.val = val
           self.freq = freq
   
   
   class LFUCache:
   
       def __init__(self, capacity: int):
           self.capacity = capacity
           self.min_count = None
   
           # key -> Node
           self.m = {}
           # freq -> {key -> node}
           self.freq_to_node = defaultdict(OrderedDict)
   
       def get(self, key: int) -> int:
           if key not in self.m:
               return -1
           node = self.m[key]
   
           # clear node with current freq
           del self.freq_to_node[node.freq][key]
   
           if len(self.freq_to_node[node.freq]) == 0:
               del self.freq_to_node[node.freq]
   
           node.freq += 1
           self.freq_to_node[node.freq][key] = node
           if len(self.freq_to_node[self.min_count]) == 0:
               self.min_count += 1
   
           return node.val
   
       def put(self, key: int, value: int) -> None:
           if key in self.m:
               self.m[key].val = value
               self.get(key)
           else:
               if len(self.m) == self.capacity:
                   # remove least frequent used element by FIFO
                   k, _ = self.freq_to_node[self.min_count].popitem(last=False)
                   del self.m[k]
   
               new_node = Node(key, value)
               self.m[key] = new_node
               self.freq_to_node[1][key] = new_node
               self.min_count = 1
   

