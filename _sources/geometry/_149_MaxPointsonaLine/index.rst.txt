=====================
 149 Maxpointsonaline
=====================

Py Solution
-----------

.. code-block:: py

   from typing import List
   from collections import defaultdict
   
   
   class Solution:
       def maxPoints(self, points: List[List[int]]) -> int:
           def gcd(a, b):
               if a == 0:
                   return b
               return gcd(b % a, a)
   
           def get_slope(p1: List[int], p2: List[int]):
               dx = p2[0] - p1[0]
               dy = p2[1] - p1[1]
               if dx == 0:
                   return f"0-{p1[1]}"
               if dy == 0:
                   return f"{p1[0]}-0"
   
               d = gcd(dx, dy)
               return f"{dx/d}-{dy/d}"
   
           n = len(points)
           res = 0
           for i in range(n):
               m = defaultdict(int)
               p1 = points[i]
               same = 1
               max_points = 0
               for j in range(i + 1, n):
                   p2 = points[j]
                   if p1[0] == p2[0] and p1[1] == p2[1]:
                       same += 1
                   else:
                       slope = get_slope(p1, p2)
                       m[slope] += 1
                       max_points = max(max_points, m[slope])
               res = max(res, same + max_points)
   
           return res
   

Java Solution
-------------

.. code-block:: java

   /*
    * @Date: 12/30/2019 16:12:56
    * @LastEditTime: 07/26/2022 09:44:40
    * @Description: Math, Geometry
    */
   package com.leetcode.geometry;
   
   import java.util.HashMap;
   import java.util.Map;
   
   public class _149_MaxPointsonaLine {
       public int maxPoints(int[][] points) {
           // time: (n^2)
           if (points == null || points.length == 0) {
               return 0;
           }
           int n = points.length;
           int res = 0;
           for (int i = 0; i < n; i++) {
               Map<String, Integer> map = new HashMap<>();
               int samePoints = 1; // 包括它自己
               int maxPoints = 0;
               int[] p1 = points[i];
               for (int j = i + 1; j < n; j++) {
                   int[] p2 = points[j];
                   if (p1[0] == p2[0] && p1[1] == p2[1]) {
                       samePoints++;
                   } else {
                       String slope = getSlope(p1, p2);
                       // System.out.println("p1 = " + Arrays.toString(p1) + " p2 = " + Arrays.toString(p2) + " slope = " + slope);
                       map.put(slope, map.getOrDefault(slope, 0) + 1);
                       maxPoints = Math.max(maxPoints, map.get(slope));
                   }
               }
               res = Math.max(res, maxPoints + samePoints);
           }
           return res;
       }
       
       public String getSlope(int[] p1, int[] p2) {
           int dy = p2[1] - p1[1];
           int dx = p2[0] - p1[0];
           // y坐标相同，那就利用y坐标的值来表示在同一条垂直线
           if (dy == 0) {
               return "0" + "-" + p1[1];
           }
           // x坐标相同，那就利用x坐标的值来表示在同一条水平线
           if (dx == 0) {
               return p1[0] + "-" + "0";
           }
           int d = gcd(dx, dy);
           return (dx / d) + "-" + (dy / d);
       }
       
       public int gcd(int a, int b) {
           if (a == 0) return b;
           return gcd(b % a, a);
       }
   }
   

