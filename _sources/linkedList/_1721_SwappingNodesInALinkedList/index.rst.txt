================================
 1721 Swappingnodesinalinkedlist
================================

Py Solution
-----------

.. code-block:: py

   from typing import Optional
   
   from leetcode.common.py_utils import ListNode
   
   
   class Solution:
       def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
           first, second = None, None
           curr = head
           while curr:
               k -= 1
               # use first as fast node and keep the relative distance between first and second
               second = None if second is None else second.next
               if k == 0:
                   first = curr
                   second = head
   
               curr = curr.next
   
           first.val, second.val = second.val, first.val
           return head
   

Java Solution
-------------

.. code-block:: java

   /*
    * @Date: 03/14/2021 09:34:21
    * @LastEditTime: 03/14/2021 09:35:08
    * @Description: Swap, LinkedList
    */
   package com.leetcode.linkedList;
   
   import com.leetcode.common.ListNode;
   
   public class _1721_SwappingNodesInALinkedList {
       // 比较巧妙的保持相对距离的方法。
       public ListNode swapNodes(ListNode head, int k) {
           if (head == null) {
               return head;
           }
           ListNode first = null, second = null;
           for (ListNode curr = head; curr != null; curr = curr.next) {
               second = (second == null ? null : second.next);
               if (--k == 0) {
                   first = curr;
                   second = head;
               }
           }
           int temp = first.val;
           first.val = second.val;
           second.val = temp;
           return head;
       }
   }
   

