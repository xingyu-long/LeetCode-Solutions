============================================================
 426 Convert Binary Search Tree To Sorted Doubly Linked List
============================================================

Py Solution
-----------

.. code-block:: py

   # Definition for a Node.
   from typing import Optional
   
   from leetcode.common.py_utils import TreeNode as Node
   
   
   class Solution:
       def treeToDoublyList(self, root: "Optional[Node]") -> "Optional[Node]":
           if not root:
               return None
   
           # in-order traversal
           curr = root
           stack = []
           prev = None
           first, last = None, None
           while stack or curr:
               while curr:
                   stack.append(curr)
                   curr = curr.left
   
               curr = stack.pop()
               if first is None:
                   first = curr
               if prev:
                   curr.left = prev
                   prev.right = curr
   
               prev = curr
               last = curr
               curr = curr.right
   
           first.left = last
           last.right = first
           return first
   

Java Solution
-------------

.. code-block:: java

   package com.leetcode.linkedList;
   
   import com.leetcode.common.Node;
   import java.util.Stack;
   
   /**
    * @Date: 05/20/2020
    * @Description: LinkedList
    **/
   public class _426_ConvertBinarySearchTreetoSortedDoublyLinkedList {
   
       public Node treeToDoublyList(Node root) {
           if (root == null) {
               return null;
           }
           // morris-traversal???
           Node prev = null, first = null, end = null;
           Stack<Node> stack = new Stack<>();
           Node curr = root;
           while (curr != null || !stack.isEmpty()) {
               while (curr != null) {
                   stack.push(curr);
                   curr = curr.left;
               }
               curr = stack.pop();
               end = curr;
               if (prev != null) {
                   //connect?
                   curr.left = prev;
                   prev.right = curr;
               }
   
               if (first == null) {
                   first = curr;
               }
               prev = curr;
               curr = curr.right;
           }
   
           first.left = end;
           end.right = first;
           return first;
       }
   }
   

