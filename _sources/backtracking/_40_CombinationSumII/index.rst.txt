====================
 40 Combinationsumii
====================

Py Solution
-----------

.. code-block:: py

   from typing import List
   
   
   class Solution:
       def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
           candidates.sort()
           res = []
   
           def dfs(path, target, index):
               if target == 0:
                   res.append(list(path))
                   return
               for i in range(index, len(candidates)):
                   if i != index and candidates[i] == candidates[i - 1]:
                       continue
                   if target - candidates[i] >= 0:
                       path.append(candidates[i])
                       dfs(path, target - candidates[i], i + 1)
                       path.pop()
   
           dfs([], target, 0)
           return res
   

Java Solution
-------------

.. code-block:: java

   package com.leetcode.backtracking;
   
   import java.util.ArrayList;
   import java.util.Arrays;
   import java.util.List;
   
   /**
    * @Date: 2019/04/29, 2019/7/15, 2019/10/13, 06/08/2020
    * @Description: Backtracking
    **/
   public class _40_CombinationSumII {
   
       // sort + 去重
       //time:O(2^n) space:O(n)
       public List<List<Integer>> combinationSum2(int[] candidates, int target) {
           List<List<Integer>> res = new ArrayList<>();
           if (candidates == null || candidates.length == 0) {
               return res;
           }
           Arrays.sort(candidates);
           helper(res, new ArrayList<Integer>(), candidates, target, 0);
           return res;
       }
   
       public void helper(List<List<Integer>> res, List<Integer> list, int[] candidates, int target,
           int start) {
           if (target < 0) {
               return;
           }
           if (target == 0) {
               res.add(new ArrayList<>(list));
               return;
           }
   
           for (int i = start; i < candidates.length; i++) {
               if (i != start && candidates[i] == candidates[i - 1]) {
                   continue;
               }
               list.add(candidates[i]);
               helper(res, list, candidates, target - candidates[i], i + 1);
               list.remove(list.size() - 1);
           }
       }
   }
   

