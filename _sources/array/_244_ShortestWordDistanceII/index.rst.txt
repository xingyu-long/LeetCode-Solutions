===========================
 244 Shortestworddistanceii
===========================

Java Solution
-------------

.. code-block:: java

   package com.leetcode.array;
   
   import java.util.ArrayList;
   import java.util.HashMap;
   import java.util.List;
   
   public class _244_ShortestWordDistanceII {
   
       private HashMap<String, List<Integer>> map;
   
       public _244_ShortestWordDistanceII(String[] words) {
           map = new HashMap<>();
           for (int i = 0; i < words.length; i++) {
               map.putIfAbsent(words[i], new ArrayList<>());
               map.get(words[i]).add(i);
           }
       }
   
       //time:O(m * n) space:O(n)
       public int shortest(String word1, String word2) {
           List<Integer> l1 = map.get(word1);
           List<Integer> l2 = map.get(word2);
           int res = Integer.MAX_VALUE;
           for (Integer num1 : l1) {
               for (Integer num2 : l2) {
                   res = Math.min(res, Math.abs(num1 - num2));
               }
           }
           return res;
       }
   
       //time:O(m + n) 遍历一遍 因为l1 l2 里面是升序的 所以这里面只要遍历完一个list 就可以求出来最小
       public int shortest2(String word1, String word2) {
           List<Integer> l1 = map.get(word1);
           List<Integer> l2 = map.get(word2);
           int res = Integer.MAX_VALUE;
           int i = 0, j = 0;
           while (i < l1.size() && j < l2.size()) {
               res = Math.min(res, Math.abs(l1.get(i) - l2.get(j)));
               if (l1.get(i) < l2.get(j)) {
                   i++;
               } else {
                   j++;
               }
           }
           return res;
       }
   }

Py Solution
-----------

.. code-block:: py

   from collections import defaultdict
   from math import inf
   from typing import List
   
   
   class WordDistance:
   
       def __init__(self, wordsDict: List[str]):
           self.map = defaultdict(list)
   
           for i, word in enumerate(wordsDict):
               self.map[word].append(i)
   
       def shortest(self, word1: str, word2: str) -> int:
           seq1 = self.map[word1]
           seq2 = self.map[word2]
           i, j = 0, 0
           res = inf
           while i < len(seq1) and j < len(seq2):
               res = min(res, abs(seq1[i] - seq2[j]))
               if seq1[i] > seq2[j]:
                   j += 1
               else:
                   i += 1
           return res
   

