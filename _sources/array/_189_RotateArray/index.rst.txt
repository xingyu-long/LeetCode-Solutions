================
 189 Rotatearray
================

Py Solution
-----------

.. code-block:: py

   from typing import List
   
   """
   189. Rotate Array
   
   ---
   Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.
   
   ---
   Example 1:
   
   Input: nums = [1,2,3,4,5,6,7], k = 3
   Output: [5,6,7,1,2,3,4]
   Explanation:
   rotate 1 steps to the right: [7,1,2,3,4,5,6]
   rotate 2 steps to the right: [6,7,1,2,3,4,5]
   rotate 3 steps to the right: [5,6,7,1,2,3,4]
   
   Example 2:
   
   Input: nums = [-1,-100,3,99], k = 2
   Output: [3,99,-1,-100]
   Explanation: 
   rotate 1 steps to the right: [99,-1,-100,3]
   rotate 2 steps to the right: [3,99,-1,-100]
   """
   
   
   class Solution:
       def reverse(self, nums, left, right):
           while left < right:
               nums[left], nums[right] = nums[right], nums[left]
               left += 1
               right -= 1
   
       def rotate(self, nums: List[int], k: int) -> None:
           """
           Do not return anything, modify nums in-place instead.
           """
           n = len(nums)
           k = k % n
           # reverse the whole list
           self.reverse(nums, 0, n - 1)
           # reverse first k elements
           self.reverse(nums, 0, k - 1)
           # reverse the rest of elements
           self.reverse(nums, k, n - 1)
   

Java Solution
-------------

.. code-block:: java

   package com.leetcode.array;
   
   import java.util.Arrays;
   
   /**
    * @Date: 2019/2/12, 2019/7/1, 2019/8/20, 08/25/2020
    * @Description: Graph, array.
    **/
   public class _189_RotateArray {
       //time: O(n) space:O(n)
       public static void rotate(int[] nums, int k) {
           //通过求余运算
           int[] temp = new int[nums.length];
           for (int i = 0; i < nums.length; i++) {
               //i + k就表示应该所在的位置，但是可能超出数组长度，所以这里再%即可。
               temp[(i + k) % nums.length] = nums[i];
           }
           //赋值给nums
           System.arraycopy(temp, 0, nums, 0, nums.length);
       }
   
       /**
        * 思路：通过反转数组的方式，然后局部反转 达到效果。
        *
        * @param nums
        * @param k
        */
       //time:O(n) space:O(1)
       public static void rotate2(int[] nums, int k) {
           k %= nums.length;
           reverse(nums, 0, nums.length - 1);
           reverse(nums, 0, k - 1);
           reverse(nums, k, nums.length - 1);
       }
   
       public static void reverse(int[] nums, int start, int end) {
           while (start < end) {
               int temp = nums[start];
               nums[start] = nums[end];
               nums[end] = temp;
               start++;
               end--;
           }
       }
   }
   

