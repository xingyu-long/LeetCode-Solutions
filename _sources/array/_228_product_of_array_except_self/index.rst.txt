=================================
 228 Product Of Array Except Self
=================================

Py Solution
-----------

.. code-block:: py

   from typing import List
   
   
   """
   238. Product of Array Except Self
   ---
   
   Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
   
   The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
   
   You must write an algorithm that runs in O(n) time and without using the division operation.
   ---
   
   Example 1:
   
   Input: nums = [1,2,3,4]
   Output: [24,12,8,6]
   
   Example 2:
   
   Input: nums = [-1,1,0,-3,3]
   Output: [0,0,9,0,0]
   ---
   
   tags: array, prefix
   """
   
   
   class Solution:
       def productExceptSelf(self, nums: List[int]) -> List[int]:
           """
           solution 1: brute force (two loops)
           solution 2:
               nums:      a0,           a1,         a2,       a3
               forward:   1,           a0         a0*a1      a0*a1*a2
               backward:  a1*a2*a3     a2*a3        a3            1
               target:   a1*a2*a3,    a0*a2*a3,  a0*a1*a3,  a0*a1*a2
           """
           n = len(nums)
           res = [0 for _ in range(n)]
           res[0] = 1
           backward = 1
           for i in range(1, n):
               res[i] = res[i - 1] * nums[i - 1]
           for i in range(n - 2, -1, -1):
               backward *= nums[i + 1]
               res[i] *= backward
           return res
   

Java Solution
-------------

.. code-block:: java

   /*
    * @Date: 08/11/2020 16:07:14
    * @LastEditTime: 06/05/2022 11:21:09
    * @Description: Simulation
    */
   package com.leetcode.array.counter;
   
   import java.util.ArrayList;
   import java.util.List;
   
   public class _228_SummaryRanges {
       // time: O(n), space: O(1) except the result array.
       public List<String> summaryRanges(int[] nums) {
           List<String> res = new ArrayList<>();
           if (nums == null || nums.length == 0) {
               return res;
           }
           int n = nums.length;
           int index = 0;
           while (index < n) {
               int start = nums[index];
               while (index + 1 < n && nums[index + 1] == nums[index] + 1) {
                   index++;
               }
               int end = nums[index];
               if (start != end) res.add(start + "->" + end);
               else res.add("" + start);
               index++;
           }
           return res;
       }
   }
   

