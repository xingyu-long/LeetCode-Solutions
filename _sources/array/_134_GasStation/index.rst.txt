===============
 134 Gasstation
===============

Py Solution
-----------

.. code-block:: py

   from typing import List
   
   """
   134. Gas Station
   ---
   
   There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].
   
   You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.
   
   Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique
   ---
   
   Example 1:
   
   Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
   Output: 3
   Explanation:
   Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
   Travel to station 4. Your tank = 4 - 1 + 5 = 8
   Travel to station 0. Your tank = 8 - 2 + 1 = 7
   Travel to station 1. Your tank = 7 - 3 + 2 = 6
   Travel to station 2. Your tank = 6 - 4 + 3 = 5
   Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
   Therefore, return 3 as the starting index.
   
   Example 2:
   
   Input: gas = [2,3,4], cost = [3,4,3]
   Output: -1
   Explanation:
   You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
   Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
   Travel to station 0. Your tank = 4 - 3 + 2 = 3
   Travel to station 1. Your tank = 3 - 3 + 3 = 3
   You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
   Therefore, you can't travel around the circuit once no matter where you start.
   """
   
   
   class Solution:
       def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
           res = 0
           # use remain + debt to decide if we can reach to final stop
           # we can also use sum(gas) - sum(cost) to compute beforehand.
           # However, following solution would be better in one pass.
           remain, debt = 0, 0
           for i in range(len(gas)):
               remain += gas[i] - cost[i]
               if remain < 0:
                   res = i + 1
                   # record any negative sum here
                   debt += remain
                   remain = 0
   
           return res if debt + remain >= 0 else -1
   

Java Solution
-------------

.. code-block:: java

   package com.leetcode.greedy;
   
   /**
    * @Date: 2019/03/12, 2019/6/2, 2019/8/24, 08/25/2020
    * @Description: Greedy
    **/
   public class _134_GasStation {
   
       // 解题思路：
       // 1. 首先通过累积和（总加油-总耗油）来计算是否存在这样的成立的情况
       // 2. 只要能够总的算下来 > 0 即可
       // 这个方法主要是表示只要在这个点之后的debt+remain都能做到 那就是从这个点出发即可
       //time: O(n) space:O(1)
       public static int canCompleteCircuit(int[] gas, int[] cost) {
           int start = 0; //起始位置
           int remain = 0; //当前剩余燃料
           int debt = 0; // 前面没能走完的路上欠的债
           for (int i = 0; i < gas.length; i++) {
               remain += gas[i] - cost[i];
               if (remain < 0) {
                   debt += remain;
                   start = i + 1;
                   remain = 0;
               }
           }
           return remain + debt >= 0 ? start : -1;
       }
   }
   

