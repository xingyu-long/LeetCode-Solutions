===============================
 128 Longestconsecutivesequence
===============================

Py Solution
-----------

.. code-block:: py

   from typing import List
   
   """
   128. Longest Consecutive Sequence
   ---
   
   Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
   
   You must write an algorithm that runs in O(n) time.
   ---
   
   Example 1:
   
   Input: nums = [100,4,200,1,3,2]
   Output: 4
   Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
   
   Example 2:
   
   Input: nums = [0,3,7,2,5,8,4,6,0,1]
   Output: 9
   """
   
   
   class Solution:
       # time: O(n) space: O(n)
       def longestConsecutive(self, nums: List[int]) -> int:
           hash_set = set(nums)
           res = 0
           for num in nums:
               if (num + 1) not in hash_set:
                   curr = num
                   count = 0
                   # only go one direction
                   while curr in hash_set:
                       count += 1
                       curr = curr - 1
                   res = max(res, count)
           return res
   
   
   class Solution2:
       def longestConsecutive(self, nums: List[int]) -> int:
           m = {}
           res = 0
           for num in nums:
               if num not in m:
                   left = m.get(num - 1, 0)
                   right = m.get(num + 1, 0)
                   size = left + 1 + right
                   m[num] = size
                   res = max(res, size)
                   # if we don't have neighbors, we will just update
                   # m[num] with latest consecutive size
                   # otherwise, neighbors update the size as well.
                   m[num - left] = size
                   m[num + right] = size
   
           return res
   

Java Solution
-------------

.. code-block:: java

   package com.leetcode.array;
   
   import java.util.HashMap;
   import java.util.HashSet;
   
   import com.leetcode.graph.union_find.UnionFind;
   
   /**
    * @Date: 2019/03/25, 2019/7/11, 11/1/2019, 08/28/2020
    * @Description: Union Find, Set.
    **/
   public class _128_LongestConsecutiveSequence {
       //time: O(n) space: O(n)
       public int longestConsecutive(int[] nums) {
           if (nums == null || nums.length == 0) return 0;
           int res = 0;
           HashSet<Integer> set = new HashSet<>();
           //赋值给HashSet
           for (int num : nums) set.add(num);
           for (int num : set) {
               //表示没有存在 x-1 的数（后面表示一直是x+1, x+2 ....
               if (!set.contains(num - 1)) {
                   int currentNum = num;
                   int currentRes = 1;
   
                   //表示为持续+
                   while (set.contains(currentNum + 1)) {
                       currentNum += 1;
                       currentRes += 1;
                   }
                   res = Math.max(currentRes, res);
               }
           }
           return res;
       }
   
       // 利用Union Find！
       public static int longestConsecutive2(int[] nums) {
           if (nums == null || nums.length == 0) return 0;
           // 利用hashmap记录坐标值（这个用来后面连接使用）
           UnionFind uf = new UnionFind(nums.length);
           HashMap<Integer, Integer> map = new HashMap<>();
           for (int i = 0; i < nums.length; i++) {
               if (map.containsKey(nums[i])) continue; // 移除 duplicate
               map.put(nums[i], i);
               if (map.containsKey(nums[i] + 1)) {
                   uf.union(i, map.get(nums[i] + 1));
               }
   
               if (map.containsKey(nums[i] - 1)) {
                   uf.union(i, map.get(nums[i] - 1));
               }
           }
           return uf.maxSize();
       }
   
   }
   

