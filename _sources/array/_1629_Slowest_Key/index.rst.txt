=================
 1629 Slowest Key
=================

Py Solution
-----------

.. code-block:: py

   '''
   Date: 09/06/2021 15:08:14
   LastEditTime: 09/06/2021 15:10:19
   Description: logical 
   '''
   
   
   from typing import List
   
   
   class Solution:
       def slowestKey(self, releaseTimes: List[int], keysPressed: str) -> str:
           res, max_dur = keysPressed[0], releaseTimes[0]
           for i in range(1, len(keysPressed)):
               dur = releaseTimes[i] - releaseTimes[i - 1]
               if dur > max_dur or (dur == max_dur and keysPressed[i] > res):
                   res = keysPressed[i]
                   max_dur = dur
           return res
   

Java Solution
-------------

.. code-block:: java

   /*
    * @Date: 09/06/2021 14:58:00
    * @LastEditTime: 09/06/2021 14:58:01
    * @Description: Math, Logical
    */
   package com.leetcode.array;
   
   public class _1629_SlowestKey {
       // time: O(n)
       public char slowestKey(int[] releaseTimes, String keysPressed) {
           int max = 0;
           char res = '0';
           for (int i = 0; i < releaseTimes.length; i++) {
               if (i == 0) {
                   max = releaseTimes[i];
                   res = keysPressed.charAt(i);
               } else {
                   int dur = releaseTimes[i] - releaseTimes[i - 1];
                   if (dur > max) {
                       max = dur;
                       res = keysPressed.charAt(i);
                   } else if (dur == max) {
                       if (keysPressed.charAt(i) > res) {
                           res = keysPressed.charAt(i);
                       }
                   }
               }
           }
           return res;
       }
   }
   

