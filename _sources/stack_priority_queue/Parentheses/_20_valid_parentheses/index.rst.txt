=====================
 20 Valid Parentheses
=====================

Py Solution
-----------

.. code-block:: py

   class Solution:
       # 利用一样的思路，但可否用map优化？
       def isValid(self, s: str) -> bool:
           stack = []
           for ch in s:
               if ch == "(" or ch == "[" or ch == "{":
                   stack.append(ch)
               else:
                   # If stack is empty
                   if not stack:
                       return False
                   if stack[-1] == "(" and ch != ")":
                       return False
                   if stack[-1] == "[" and ch != "]":
                       return False
                   if stack[-1] == "{" and ch != "}":
                       return False
                   stack.pop()
   
           return len(stack) == 0
   
   
   class Solution2:
       def isValid(self, s: str) -> bool:
           m = {")": "(", "}": "{", "]": "["}
           stack = []
           for ch in s:
               if ch in m.values():
                   stack.append(ch)
               elif ch in m:
                   if stack and m[ch] == stack[-1]:
                       stack.pop()
                   else:
                       return False
               else:
                   # unreachable
                   return False
           return len(stack) == 0
   

Java Solution
-------------

.. code-block:: java

   package com.leetcode.stack_priority_queue.Parentheses;
   
   import java.util.HashMap;
   import java.util.Stack;
   
   public class _20_ValidParentheses {
       /**
        * 20. Valid Parentheses
        * When: 2019/8/9
        * review1: 11/4/2019
        * Difficulty: Easy
        * solution: 利用stack，后面pop出来然后比较
        * @param s
        * @return
        */
       public boolean isValid(String s) {
           if (s == null || s.length() == 0) return true;
           Stack<Character> stack = new Stack<>();
           for (Character c : s.toCharArray()) {
               if (c == '(') {
                   stack.push(')');
               } else if (c == '{') {
                   stack.push('}');
               } else if (c == '[') {
                   stack.push(']');
               } else {
                   if (stack.isEmpty() || stack.pop() != c) {
                       return false;
                   }
               }
           }
           return stack.isEmpty();
       }
   
       // 更加直观
       public boolean isValid2(String s) {
           if (s == null || s.length() == 0) return true;
           Stack<Character> stack = new Stack<>();
           for (char ch : s.toCharArray()) {
               if (ch == '(' || ch == '[' || ch == '{') {
                   stack.push(ch);
               } else {
                   if (stack.isEmpty()) return false; // 表示只有 右符号加入肯定是false
                   if (ch == ')' && stack.peek() != '(' ||
                           ch == ']' && stack.peek() != '[' ||
                           ch == '}' && stack.peek() != '{') return false;
                   else {
                       stack.pop();
                   }
               }
           }
           return stack.isEmpty();
       }
   
       // more general. 利用hashmap
       public boolean isValid3(String s) {
           if (s == null || s.length() == 0) return true;
           HashMap<Character, Character> map = new HashMap<>();
           map.put(')', '(');
           map.put(']', '[');
           map.put('}', '{');
   
           Stack<Character> stack = new Stack<>();
           for (char ch : s.toCharArray()) {
               if (map.containsKey(ch)) {
                   if (stack.isEmpty()) return false;
                   if (stack.peek() != map.get(ch)) return false;
                   // 满足条件
                   stack.pop();
               } else {
                   stack.push(ch);
               }
           }
           return stack.isEmpty();
       }
   }
   

