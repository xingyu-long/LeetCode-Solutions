===============================
 703 Kthlargestelementinastream
===============================

Java Solution
-------------

.. code-block:: java

   package com.leetcode.stack_priority_queue;
   
   import java.util.PriorityQueue;
   
   public class _703_KthLargestElementinaStream {
       PriorityQueue<Integer> pq; // 最小堆, 依然使用最小堆保持k个就可以了。
       int count;
   
       public _703_KthLargestElementinaStream(int k, int[] nums) {
           pq = new PriorityQueue<>();
           count = k;
           for (int num : nums) {
               pq.offer(num);
           }
       }
   
       public int add(int val) {
           pq.offer(val);
           if (pq.size() > count) {
               pq.poll();
           }
           return pq.peek();
       }
   }
   

Py Solution
-----------

.. code-block:: py

   from typing import List
   from heapq import heappush, heappop
   
   
   class KthLargest:
   
       def __init__(self, k: int, nums: List[int]):
           self.k = k
           self.nums = []
           for num in nums:
               self.add(num)
   
       def add(self, val: int) -> int:
           heappush(self.nums, val)
           if len(self.nums) > self.k:
               heappop(self.nums)
           return self.nums[0]
   

