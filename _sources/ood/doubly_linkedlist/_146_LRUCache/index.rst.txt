=============
 146 Lrucache
=============

Java Solution
-------------

.. code-block:: java

   package com.leetcode.ood.doubly_linkedlist;
   
   import java.util.HashMap;
   
   public class _146_LRUCache {
   
       /**
        * 146. LRU Cache
        * When:2019/7/6
        * Design and implement a data structure for Least Recently Used (LRU) cache.
        * It should support the following operations: get and put.
   
        get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
        put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity,
        it should invalidate the least recently used item before inserting a new item.
   
        Follow up:
        Could you do both operations in O(1) time complexity?
   
        Example:
   
        _146_LRUCache cache = new _146_LRUCache( 2  capacity  );
   
        cache.put(1, 1);
        cache.put(2, 2);
        cache.get(1);       // returns 1
        cache.put(3, 3);    // evicts key 2
        cache.get(2);       // returns -1 (not found)
        cache.put(4, 4);    // evicts key 1
        cache.get(1);       // returns -1 (not found)
        cache.get(3);       // returns 3
        cache.get(4);       // returns 4
   
        HashMap + Double Linked List
        */
       //time:O(1) space:O(n)
       private class DNode {
           int key;
           int value;
           DNode prev;
           DNode next;
       }
   
       private HashMap<Integer, DNode> map = new HashMap<>();
       private DNode head, tail;
       private int totalItemsCache;
       private int maxCapacity;
   
       public _146_LRUCache(int capacity) {
           totalItemsCache = 0;
           this.maxCapacity = capacity;
   
           // Initialize the dummy head and tail of the cache;
           head = new DNode();
           head.prev = null;
   
           tail = new DNode();
           tail.next = null;
   
           head.next = tail;
           tail.prev = head;
       }
   
       public int get(int key) {
           DNode node = map.get(key);
           boolean itemFoundInCache = node != null;
   
           if (!itemFoundInCache) {
               return -1;
           }
   
           moveToHead(node);
           return node.value;
       }
   
       public void put(int key, int value) {
           //如果没有这个，就插入（离head最近）
           DNode node = map.get(key);
           boolean itemFoundInCache = node != null;
   
           if (!itemFoundInCache) {
               DNode newNode = new DNode();
               newNode.key = key;
               newNode.value = value;
   
               map.put(key, newNode);
               addNode(newNode);
   
               totalItemsCache++;
   
               if (totalItemsCache > maxCapacity) {
                   removeLRUEntry();
               }
   
           } else {
               node.value = value;
               moveToHead(node);
           }
       }
   
       /**
           [head] ->  [tail]
                  <-
   
           [head] ->  [newNode1] -> [tail]
                  <-            <-
   
           [head] ->  [newNode2] -> [newNode1] -> [tail]
                  <-             <-            <-
        */
       /** important operation */
       private void addNode(DNode node) {
           DNode next = head.next;
   
           head.next = node;
           node.prev = head;
   
           node.next = next;
           next.prev = node;
       }
   
       private void removeLRUEntry() {
           DNode remove = popTail();
           map.remove(remove.key);
           --totalItemsCache;
       }
   
       private DNode popTail() {
           DNode itemBeingRemoved = tail.prev;
           removeNode(itemBeingRemoved);
           return itemBeingRemoved;
       }
       /** important operation */
       // 相当于直接跳过，先保存后面节点的情况，然后
       private void removeNode(DNode node) {
           DNode savedPrev = node.prev;
           DNode savedNext = node.next;
   
           savedPrev.next = savedNext;
           savedNext.prev = savedPrev;
       }
       private void moveToHead(DNode node) {
           removeNode(node);
           addNode(node);
       }
   }
   

Py Solution
-----------

.. code-block:: py

   class DNode:
       def __init__(self, key=None, val=None):
           self.key = key
           self.val = val
           self.prev = None
           self.next = None
   
   
   class LRUCache:
   
       def __init__(self, capacity: int):
           self.head = DNode()
           self.tail = DNode()
           self.map = dict()
           self.max_capacity = capacity
           self.curr_capacity = 0
   
           self.head.next = self.tail
           self.tail.prev = self.head
   
       def get(self, key: int) -> int:
           node = self.map.get(key, None)
           found = node != None
           if not found:
               return -1
   
           self.move_to_head(node)
           return node.val
   
       def put(self, key: int, value: int) -> None:
           node = self.map.get(key, None)
           found = node != None
           if found:
               node.val = value
               self.move_to_head(node)
           else:
               new_node = DNode(key, value)
               self.map[key] = new_node
               self.add_node(new_node)
               self.curr_capacity += 1
               if self.curr_capacity > self.max_capacity:
                   self.remove_lru_entry()
   
       def add_node(self, node: DNode):
           """
           Add new node to doubly linked list
           HEAD -> new_node -> ... -> TAIL
           """
           nxt_node = self.head.next
   
           self.head.next = node
           node.prev = self.head
   
           node.next = nxt_node
           nxt_node.prev = node
   
       def remove_node(self, node: DNode):
           prev_node = node.prev
           nxt_node = node.next
   
           prev_node.next = nxt_node
           nxt_node.prev = prev_node
   
       def pop_tail(self):
           prev_node = self.tail.prev
           self.remove_node(prev_node)
           return prev_node
   
       def move_to_head(self, node: DNode):
           self.remove_node(node)
           self.add_node(node)
   
       def remove_lru_entry(self):
           node = self.pop_tail()
           del self.map[node.key]
           self.curr_capacity -= 1
   

