====================================
 346 Moving Average From Data Stream
====================================

Py Solution
-----------

.. code-block:: py

   from collections import deque
   
   
   class MovingAverage:
   
       def __init__(self, size: int):
           self.queue = deque()
           self.limit = size
           self.total = 0
   
       def next(self, val: int) -> float:
           if len(self.queue) == self.limit:
               self.total -= self.queue.popleft()
   
           self.queue.append(val)
           self.total += val
           return self.total * 1.0 / len(self.queue)
   
   
   # Your MovingAverage object will be instantiated and called as such:
   # obj = MovingAverage(size)
   # param_1 = obj.next(val)
   

Java Solution
-------------

.. code-block:: java

   package com.leetcode.ood;
   
   import java.util.LinkedList;
   import java.util.Queue;
   
   public class _346_MovingAveragefromDataStream {
   
       /**
        *  346. Moving Average from Data Stream
        *  When: 2019/7/3
   
        m.next(1) = 1
        m.next(10) = (1 + 10) / 2
        m.next(3) = (1 + 10 + 3) / 3
        m.next(5) = (10 + 3 + 5) / 3
   
        */
   
       //time:O(n) space:O(n)
       private Queue<Integer> queue;
       private double sum = 0;
       private int size;
   
       public _346_MovingAveragefromDataStream(int size) {
           queue = new LinkedList<>();
           this.size = size;
       }
   
       public double next(int val) {
           if (queue.size() == size) {
               sum -= queue.remove();
           }
           sum += val;
           queue.offer(val);
           return sum / queue.size();
       }
   }

