=====================
 137 Single Number Ii
=====================

Py Solution
-----------

.. code-block:: py

   from typing import List
   
   
   class Solution:
       def singleNumber(self, nums: List[int]) -> int:
           if not nums:
               return 0
   
           res = 0
           for i in range(32):
               total = 0
               for j in range(len(nums)):
                   if (nums[j] >> i) & 1 == 1:
                       total += 1
               total %= 3
               if total != 0:
                   res |= total << i
           return res if res < 2**31 else res - 2**32
   

Java Solution
-------------

.. code-block:: java

   /*
    * @Date: 08/11/2020 15:07:14
    * @LastEditTime: 11/06/2021 19:25:04
    * @Description: Bit
    */
   package com.leetcode.bit_manipulation;
   
   public class _137_SingleNumberII {
   
       // 主要是看每一位的情况
       // time:O(n) space:O(1)
       public int singleNumber(int[] nums) {
           int res = 0;
           if (nums == null || nums.length == 0) {
               return res;
           }
           // 计算每一位上的1's的个数
           for (int i = 0; i < 32; i++) {
               int sum = 0;
               for (int j = 0; j < nums.length; j++) {
                   if (((nums[j] >> i) & 1) == 1) {
                       sum++;
                   }
               }
               sum %= 3;
               if (sum != 0) {
                   res |= (sum << i);
               }
           }
           return res;
       }
   }
   

