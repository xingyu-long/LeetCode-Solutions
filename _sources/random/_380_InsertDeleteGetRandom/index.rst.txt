==========================
 380 Insertdeletegetrandom
==========================

Py Solution
-----------

.. code-block:: py

   from random import randrange
   
   
   class RandomizedSet:
   
       # solution1: maintain the size of arr
       def __init__(self):
           self.arr = []
           self.size = 0
           self.m = {}
   
       def insert(self, val: int) -> bool:
           if val in self.m:
               return False
   
           if not self.arr or len(self.arr) <= self.size:
               self.arr.append(val)
           else:
               # we have larger arr and didn't used up yet (probably due to remove)
               self.arr[self.size] = val
   
           self.m[val] = self.size
           self.size += 1
           return True
   
       def remove(self, val: int) -> bool:
           if val not in self.m:
               return False
           idx = self.m[val]
   
           def exch(arr, i, j):
               arr[i], arr[j] = arr[j], arr[i]
   
           tail_idx = self.size - 1
           tail_value = self.arr[tail_idx]
   
           exch(self.arr, idx, tail_idx)
   
           self.m[tail_value] = idx
           self.size -= 1
           del self.m[val]
           return True
   
       def getRandom(self) -> int:
           random_idx = randrange(0, self.size)
           return self.arr[random_idx]
   
   
   class RandomizedSet2:
   
       # solution2: always pop out the last element and check if its same as remove value.
       def __init__(self):
           self.map = {}
           self.arr = []
   
       def insert(self, val: int) -> bool:
           if val in self.map:
               return False
   
           self.map[val] = len(self.arr)
           self.arr.append(val)
           return True
   
       def remove(self, val: int) -> bool:
           if val not in self.map:
               return False
   
           # pop out the last element
           idx = self.map[val]
           del self.map[val]
   
           tail_idx = len(self.arr) - 1
           tail_value = self.arr.pop()
   
           # if the removed val is not the end of element.
           if idx != tail_idx:
               self.arr[idx] = tail_value
               self.map[tail_value] = idx
   
           return True
   
       def getRandom(self) -> int:
           return self.arr[randrange(0, len(self.arr))]
   

Java Solution
-------------

.. code-block:: java

   package com.leetcode.random;
   
   import java.util.ArrayList;
   import java.util.HashMap;
   import java.util.Random;
   
   public class _380_InsertDeleteGetRandom {
   
       HashMap<Integer, Integer> map;
       ArrayList<Integer> list;
       Random rmd;
   
       // time: O(1) space:O(n)
       /**
        *  380. Insert Delete GetRandom O(1)
        * When: 2019/06/27
        * review1: 11/9/2019
   
        solution: 主要使用ArrayList 以及 HashMap（分别保存值以及对应在list的坐标）
   
        test case: 主要关于在remove操作
        Before:
        HashMap:    val  i
        3    0
        2    1
        1    *2*
        list: [3,*2*,1]
   
        remove (val = 2)
        首先是 HashMap 中key = 2 被删除，但是这里的key = 1对应的val即i需要更新为1才对
        list 直接弹出最后一个 就剩下[3,2]
        所以这里需要更新map的i 以及 更新list的值
        list.set(1, 1)
        list = [3,1]
        map.put(1,1) 修改成功
   
        */
       /**
        * Initialize your data structure here.
        */
       public _380_InsertDeleteGetRandom() {
           map = new HashMap<>();
           list = new ArrayList<>();
           rmd = new Random();
       }
   
       /**
        * Inserts a value to the set. Returns true if the set did not already contain the specified element.
        */
       public boolean insert(int val) {
           if (map.containsKey(val)) return false;
           map.put(val, list.size());
           list.add(val);
           return true;
       }
   
       /**
        * Removes a value from the set. Returns true if the set contained the specified element.
        */
       public boolean remove(int val) {
           if (!map.containsKey(val)) return false;
   
           int index = map.remove(val); // will return the value of that key
           int lastVal = list.remove(list.size() - 1);
           //这一步很重要，关键如何理解(如何保持list和map同步)
           if (index != list.size()) { // 表示list删除的元素，在map中对应的位置不是最后一个。
               list.set(index, lastVal);
               map.put(lastVal, index);
           }
           return true;
       }
   
       /**
        * Get a random element from the set.
        */
       public int getRandom() {
           return list.get(rmd.nextInt(list.size()));
       }
   }
   

