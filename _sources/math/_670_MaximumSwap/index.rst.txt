================
 670 Maximumswap
================

Java Solution
-------------

.. code-block:: java

   package com.leetcode.math;
   
   /**
    * @Date: 05/19/2020
    * @Description: Number
    **/
   public class _670_MaximumSwap {
       // 每次努力去找比当前位数字大的情况，然后交换上来即可（并且从9开始）。
       public int maximumSwap(int num) {
           char[] digits = String.valueOf(num).toCharArray();
           int[] indexes = new int[10];
           for (int i = 0; i < digits.length; i++) {
               indexes[digits[i] - '0'] = i;
           }
   
           for (int i = 0; i < digits.length; i++) {
               for (int k = 9; k > digits[i] - '0'; k--) {
                   if (indexes[k] > i) { // 当前k这个char存在并且其位置比现在大，所以可以换到前面来
                       char temp = digits[i];
                       digits[i] = digits[indexes[k]];
                       digits[indexes[k]] = temp;
                       return Integer.parseInt(new String(digits));
                   }
               }
           }
           return num;
       }
   }
   

Py Solution
-----------

.. code-block:: py

   class Solution:
       # time: O(n)
       # space: O(n)
       def maximumSwap(self, num: int) -> int:
           # greedy
           arr = [int(x) for x in str(num)]
           max_idx = len(arr) - 1
           xi = yi = 0
           for i in range(len(arr))[::-1]:
               if arr[i] > arr[max_idx]:
                   max_idx = i
               elif arr[i] < arr[max_idx]:
                   xi = i
                   yi = max_idx
           arr[xi], arr[yi] = arr[yi], arr[xi]
           return int("".join([str(x) for x in arr]))
   

