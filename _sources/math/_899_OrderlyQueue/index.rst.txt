=================
 899 Orderlyqueue
=================

Py Solution
-----------

.. code-block:: py

   '''
   Date: 09/05/2021 11:51:37
   LastEditTime: 09/05/2021 11:56:27
   Description: Math
   '''
   
   
   # 分两种情况讨论：（1）如果k=1，那就只能逐个移动并且比较
   # （2）k > 1，那就一定定找到有序的情况
   # time: O(n^2)
   class Solution:
       def orderlyQueue(self, s: str, k: int) -> str:
           if k > 1:
               return "".join(sorted(s))
           return min(s[i:] + s[:i] for i in range(len(s)))
   

Java Solution
-------------

.. code-block:: java

   /*
    * @Date: 09/05/2021 11:57:29
    * @LastEditTime: 09/05/2021 12:15:11
    * @Description: Math
    */
   package com.leetcode.math;
   
   import java.util.Arrays;
   
   // time: O(n^2)
   public class _899_OrderlyQueue {
       public String orderlyQueue(String s, int k) {
           if (k > 1) {
               char[] chs = s.toCharArray();
               Arrays.sort(chs);
               return new String(chs);
           }
           String res = s;
           for (int i = 1; i < s.length(); i++) {
               String temp = s.substring(i) + s.substring(0, i);
               if (res.compareTo(temp) > 0) {
                   res = temp;
               }
           }
           return res;
       }
   }
   

