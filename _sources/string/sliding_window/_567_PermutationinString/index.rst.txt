========================
 567 Permutationinstring
========================

Py Solution
-----------

.. code-block:: py

   from collections import Counter
   
   
   class Solution:
       # time: O(n)
       # space: O(n)
       def checkInclusion(self, s1: str, s2: str) -> bool:
           # slding window
           counter = Counter(s1)
           size = len(s1)
           n = len(s2)
           start, end = 0, 0
           while end < n:
               counter[s2[end]] -= 1
               if counter[s2[end]] >= 0:
                   size -= 1
               while size == 0:
                   # ^ this is the key and keep reduce the size
                   if end - start + 1 == len(s1):
                       return True
                   counter[s2[start]] += 1
                   if counter[s2[start]] > 0:
                       size += 1
                   start += 1
               end += 1
           return False
   

Java Solution
-------------

.. code-block:: java

   package com.leetcode.string.sliding_window;
   
   /**
    * @Date: 05/18/2020
    * @Description: Sliding Window
    **/
   public class _567_PermutationinString {
       // time:O(n + m) space:O(1)
       public boolean checkInclusion(String s1, String s2) {
           // sliding window的题目
           int[] count = new int[26];
           for (char ch : s1.toCharArray()) {
               count[ch - 'a']++;
           }
           int len = s1.length();
           int start = 0, end = 0;
           int n = s2.length();
           while (end < n) {
               if (count[s2.charAt(end) - 'a']-- > 0) len--;
               while (len == 0) {
                   if (s1.length() == end - start + 1) {
                       return true;
                   }
                   count[s2.charAt(start) - 'a']++;
                   if (count[s2.charAt(start) - 'a'] > 0) len++;
                   start++;
               }
               end++;
           }
           return false;
       }
   }
   

