=======================================================
 828 Countuniquecharactersofallsubstringsofagivenstring
=======================================================

Java Solution
-------------

.. code-block:: java

   /*
    * @Date: 07/24/2022 12:02:38
    * @LastEditTime: 07/24/2022 12:03:43
    * @Description: String
    */
   package com.leetcode.string;
   
   import java.util.ArrayList;
   import java.util.List;
   
   public class _828_CountUniqueCharactersofAllSubstringsofaGivenString {
        // 每个字符在对应的字符串里只允许出现一次
        // time: O(26 * n)
        // space: O(26 -> 1)
       public int uniqueLetterString(String s) {
           if (s == null || s.length() == 0) {
               return 0;
           }
           int n = s.length();
           List<Integer>[] list = new List[26];
           for (int i = 0; i < 26; i++) {
               list[i] = new ArrayList<>();
               list[i].add(-1);
           }
           for (int i = 0; i < n; i++) {
               int pos = s.charAt(i) - 'A';
               list[pos].add(i);
           }
           for (int i = 0; i < 26; i++) {
               list[i].add(n);
           }
           // 遍历每一个字符的triple组合
           int res = 0;
           for (int i = 0; i < 26; i++) {
               for (int j = 1; j < list[i].size() - 1; j++) {
                   res += (list[i].get(j) - list[i].get(j - 1)) * (list[i].get(j + 1) - list[i].get(j));
               }
           }
           return res;
       }
    }

Py Solution
-----------

.. code-block:: py

   '''
   Date: 08/05/2022 17:22:08
   LastEditTime: 08/05/2022 17:23:11
   Description: String
   '''
   from collections import defaultdict
   from string import ascii_uppercase
   
   
   class Solution:
       def uniqueLetterString(self, s: str) -> int:
           d = defaultdict(list)
           for idx, ch in enumerate(s):
               d[ch].append(idx)
           for key in d:
               d[key] = [-1] + d[key] + [len(s)]
           res = 0
           for ch in ascii_uppercase:
               for idx in range(1, len(d[ch]) - 1):
                   res += (d[ch][idx] - d[ch][idx - 1]) * \
                       (d[ch][idx + 1] - d[ch][idx])
           return res
   

