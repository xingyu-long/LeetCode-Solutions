=================================
 792 Numberofmatchingsubsequences
=================================

Py Solution
-----------

.. code-block:: py

   '''
   Date: 08/08/2022 15:08:50
   LastEditTime: 08/08/2022 15:11:47
   Description: Trie, Binary Search
   '''
   from collections import defaultdict
   from typing import List
   
   
   class Solution:
       class Node:
           def __init__(self, word):
               self.word = word
               self.index = 0
   
       """
       https://leetcode.com/problems/number-of-matching-subsequences/discuss/1290406/C%2B%2BJavaPython-Process-by-bucket-Picture-explain-O(N-%2B-S)
       time: O(# of words * len(word) + len(s))
       space: O(# of words)
       """
       def numMatchingSubseq(self, s: str, words: List[str]) -> int:
           buckets = defaultdict(list)
           # {ch -> []}
           for word in words:
               start_char = word[0]
               buckets[start_char].append(self.Node(word))
   
           res = 0
           for ch in s:
               current_bucket = buckets[ch]
               # Empty the bucket for next iteration
               buckets[ch] = []
               for node in current_bucket:
                   node.index += 1
                   if node.index == len(node.word):
                       res += 1
                   else:
                       start_char = node.word[node.index]
                       buckets[start_char].append(node)
           return res
   

Java Solution
-------------

.. code-block:: java

   package com.leetcode.string.Subsequence;
   
   import java.util.ArrayList;
   import java.util.HashMap;
   import java.util.List;
   
   public class _792_NumberofMatchingSubsequences {
       // time:O(mklogn)
       // n is the length of s,
       // m is the length of words,
       // k is the largest length of word.
       public int numMatchingSubseq(String S, String[] words) {
           HashMap<Character, List<Integer>> map = new HashMap<>();
           for (int i = 0; i < S.length(); i++) {
               char ch = S.charAt(i);
               map.putIfAbsent(ch, new ArrayList<>());
               map.get(ch).add(i);
           }
   
           int res = 0;
           for (int i = 0; i < words.length; i++) {
               String word = words[i];
               int prev = -1;
               int j;
               for (j = 0; j < word.length(); j++) {
                   List<Integer> nums = map.get(word.charAt(j));
                   prev = find(nums, prev);
                   if (prev == -1) break;
                   prev++;
               }
               if (j == word.length()) res++;
           }
           return res;
       }
   
       public int find(List<Integer> nums, int target) {
           if (nums == null) return -1;
           int left = 0;
           int right = nums.size() - 1;
           while (left + 1 < right) {
               int mid = left + (right - left) / 2;
               if (nums.get(mid) >= target) right = mid;
               else left = mid;
           }
           if (nums.get(left) >= target) return nums.get(left);
           if (nums.get(right) >= target) return nums.get(right);
           return -1;
       }
   }
   

