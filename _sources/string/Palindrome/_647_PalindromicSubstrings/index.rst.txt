==========================
 647 Palindromicsubstrings
==========================

Py Solution
-----------

.. code-block:: py

   class Solution:
       # time: O(n^2)
       # space: O(n^2)
       def countSubstrings(self, s: str) -> int:
           n = len(s)
           dp = [[False] * n for _ in range(n)]
           res = 0
           for j in range(n):
               for i in range(j + 1):
                   dp[i][j] = s[i] == s[j] and (j - i < 2 or dp[i + 1][j - 1])
                   if dp[i][j]:
                       res += 1
           return res
   

Java Solution
-------------

.. code-block:: java

   package com.leetcode.string.Palindrome;
   
   /**
    * 647. Palindromic Substrings
    */
   public class _647_PalindromicSubstrings {
   
       // 利用DP
       public int countSubstrings(String s) {
           if (s == null || s.length() == 0) return 0;
           boolean[][] dp = new boolean[s.length()][s.length()];
           int res = 0;
           for (int j = 0; j < s.length(); j++) {
               for (int i = 0; i <= j; i++) {
                   // j - i <= 2 表示区间在2以内的时候前面(s.charAt(i) == s.charAt(j))就可以判断了
                   // 但是如果大于2就需要前后移动来确定！
                   dp[i][j] = (s.charAt(i) == s.charAt(j)) && (j - i <= 2 || dp[i + 1][j - 1]);
                   if (dp[i][j]) res++;
               }
           }
           return res;
       }
       // 利用扩散法
       // 只需要原来的基础上每次res++;即可
   }

