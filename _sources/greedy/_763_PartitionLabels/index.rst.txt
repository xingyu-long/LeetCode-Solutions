====================
 763 Partitionlabels
====================

Java Solution
-------------

.. code-block:: java

   package com.leetcode.greedy;
   
   import java.util.ArrayList;
   import java.util.List;
   
   /**
    * @Date: 05/12/2020, 10/24/2020
    * @Description: Greedy, Index Map
    **/
   public class _763_PartitionLabels {
   
       public List<Integer> partitionLabels(String S) {
           if (S == null || S.length() == 0) {
               return new ArrayList<>();
           }
           // greedy
           List<Integer> res = new ArrayList<>();
           int[] index = new int[26];
           int n = S.length();
           for (int i = 0; i < n; i++) {
               index[S.charAt(i) - 'a'] = i;
           }
           int begin = 0, end = 0;
           for (int i = 0; i < n; i++) {
               char ch = S.charAt(i);
               end = Math.max(end, index[ch - 'a']);
               if (end == i) {
                   // add
                   res.add(end - begin + 1);
                   begin = i + 1;
               }
           }
           return res;
       }
   }
   

Py Solution
-----------

.. code-block:: py

   '''
   Date: 11/12/2020 15:29:19
   LastEditTime: 03/31/2022 17:59:42
   Description: HashMap(dict)
   '''
   from typing import List
   
   
   class Solution:
       def partitionLabels(self, s: str) -> List[int]:
           n = len(s)
           # Use HashMap to store the latest index for each char.
           right_most = {ch:index for index, ch in enumerate(s)}
   
           start, max_pos = 0, 0
           res = []
           for i in range(n):
               max_pos = max(max_pos, right_most[s[i]])
               if i == max_pos:
                   res.append(i - start + 1)
                   start = i + 1
           return res

