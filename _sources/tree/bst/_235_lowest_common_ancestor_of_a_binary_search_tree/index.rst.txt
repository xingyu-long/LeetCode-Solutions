===================================================
 235 Lowest Common Ancestor Of A Binary Search Tree
===================================================

Java Solution
-------------

.. code-block:: java

   /*
    * @Date: 2019-09-20 17:40:27
    * @LastEditors: Clark long
    * @LastEditTime: 2020-03-26 14:24:28
    */
   package com.leetcode.tree.bst;
   
   import com.leetcode.common.TreeNode;
   
   public class _235_LowestCommonAncestorOfABinarySearchTree {
       // 递归的方法 (recursive)
       // 利用其二叉搜索树性质
       // time: N space: N 因为它不是balanced BST
        public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
           // 利用其二叉搜索树的性质（即左边小于右边 并且子树也符合这个性质）
           if (p.val > root.val && q.val > root.val) {
               return lowestCommonAncestor(root.right, p, q);
           } else if (p.val < root.val && q.val < root.val) {
               return lowestCommonAncestor(root.left, p, q);
           } else {
               return root;
           }
       }
   
       // 迭代的方式 iterative
       public TreeNode lowestCommonAncestor2(TreeNode root, TreeNode p, TreeNode q) {
           TreeNode node = root;
           while (node != null) {
               if (node.val > p.val && node.val > q.val) {
                   node = node.left;
               } else if (node.val < p.val && node.val < q.val) {
                   node = node.right;
               } else {
                   return node;
               }
           }
           return null;
       }
   }
   

Py Solution
-----------

.. code-block:: py

   """
   Date: 11/20/2020 19:49:08
   LastEditTime: 11/20/2020 19:49:44
   Description: LCA
   """
   
   from leetcode.common.py_utils import TreeNode
   
   
   class Solution:
       def lowestCommonAncestor(
           self, root: "TreeNode", p: "TreeNode", q: "TreeNode"
       ) -> "TreeNode":
           if not root:
               return None
           while root:
               if root.val > p.val and root.val > q.val:
                   root = root.left
               elif root.val < p.val and root.val < q.val:
                   root = root.right
               else:
                   return root
           return None
   

