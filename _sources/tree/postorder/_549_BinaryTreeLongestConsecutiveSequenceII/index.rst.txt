===========================================
 549 Binarytreelongestconsecutivesequenceii
===========================================

Java Solution
-------------

.. code-block:: java

   package com.leetcode.tree.postorder;
   
   import com.leetcode.common.TreeNode;
   
   public class _549_BinaryTreeLongestConsecutiveSequenceII {
       // 记录每一个点的increase以及decrease的数目
       class Result {
           TreeNode node;
           int inc;
           int dec;
   
           public Result(TreeNode node, int inc, int dec) {
               this.node = node;
               this.inc = inc;
               this.dec = dec;
           }
       }
   
       public int res;
       public int longestConsecutive(TreeNode root) {
           // how to show child-parent-child order?
           // 有想到，但是没有想到用inc和dec的数目来做。
           res = 0;
           dfs(root);
           return res;
       }
   
       public Result dfs(TreeNode root) {
           if (root == null) {
               return null;
           }
   
           Result left = dfs(root.left);
           Result right = dfs(root.right);
   
           Result curr = new Result(root, 1, 1);
   
           if (left != null) {
               if (left.node.val - 1 == root.val) {
                   curr.dec = Math.max(curr.dec, left.dec + 1);
               } else if (left.node.val + 1 == root.val) {
                   curr.inc = Math.max(curr.inc, left.inc + 1);
               }
           }
   
           if (right != null) {
               if (right.node.val - 1 == root.val) {
                   curr.dec = Math.max(curr.dec, right.dec + 1);
               } else if (right.node.val + 1 == root.val) {
                   curr.inc = Math.max(curr.inc, right.inc + 1);
               }
           }
           // System.out.println("curr = " + root.val + " curr.inc" + curr.inc + " curr.dec = " + curr.dec);
           res = Math.max(res, curr.inc + curr.dec - 1);
           return curr;
       }
   }
   

Py Solution
-----------

.. code-block:: py

   from typing import Optional
   from leetcode.common.py_utils import TreeNode
   
   
   class Result:
       def __init__(self, node, inc=1, dec=1):
           self.node = node
           self.inc = inc
           self.dec = dec
   
   
   class Solution:
       def longestConsecutive(self, root: Optional[TreeNode]) -> int:
           res = 0
   
           def dfs(root) -> Optional[Result]:
               nonlocal res
   
               if not root:
                   return None
   
               left = dfs(root.left)
               right = dfs(root.right)
   
               curr = Result(root)
               if left:
                   if left.node.val - 1 == root.val:
                       curr.dec = max(curr.dec, left.dec + 1)
                   elif left.node.val + 1 == root.val:
                       curr.inc = max(curr.inc, left.inc + 1)
               if right:
                   if right.node.val - 1 == root.val:
                       curr.dec = max(curr.dec, right.dec + 1)
                   elif right.node.val + 1 == root.val:
                       curr.inc = max(curr.inc, right.inc + 1)
   
               # print(f"root={root.val}, curr.inc={curr.inc}, curr.dec={curr.dec}")
               res = max(res, curr.inc + curr.dec - 1)
               return curr
   
           dfs(root)
           return res
   

