=====================================
 1448 Count Good Nodes In Binary Tree
=====================================

Py Solution
-----------

.. code-block:: py

   from leetcode.common.py_utils import TreeNode
   
   
   class Solution:
       def goodNodes(self, root: TreeNode) -> int:
   
           res = 0
   
           def dfs(root, max_val: int):
               nonlocal res
   
               if not root:
                   return
   
               if root.val >= max_val:
                   res += 1
                   max_val = root.val
   
               dfs(root.left, max_val)
               dfs(root.right, max_val)
   
           dfs(root, root.val)
           return res
   

Java Solution
-------------

.. code-block:: java

   /*
    * @Date: 08/17/2021 10:42:06
    * @LastEditTime: 08/17/2021 10:43:16
    * @Description: Preorder with current maximum
    */
   package com.leetcode.tree.preorder;
   
   import com.leetcode.common.TreeNode;
   
   public class _1448_CountGoodNodesInBinaryTree {
       // time: O(Nodes), space: O(height)
       public int goodNodes(TreeNode root) {
           // preorder
           if (root == null) return 0;
           return dfs(root, Integer.MIN_VALUE);
       }
       
       private int dfs(TreeNode root, int max) {
           if (root == null) {
               return 0;
           }
           int res = 0;
           if (root.val >= max) {
               res++;
               max = root.val;
           }
           res += dfs(root.left, max);
           res += dfs(root.right, max);
           return res;
       }
   }
   
   

