============================
 572 Subtree Of Another Tree
============================

Java Solution
-------------

.. code-block:: java

   package com.leetcode.tree.preorder;
   
   import com.leetcode.common.TreeNode;
   
   /**
    * @Date: 05/08/2020, 10/26/2020
    * @Description: Tree, preorder
    **/
   public class _572_SubtreeofAnotherTree {
       // time:O(ST) space:O(S + T)
       public boolean isSubtree(TreeNode s, TreeNode t) {
           if (s == null || t == null) return false;
           if (isSame(s, t)) return true;
           return isSubtree(s.left, t) || isSubtree(s.right, t);
       }
   
       private boolean isSame(TreeNode s, TreeNode t) {
           if (s == null && t == null) {
               return true;
           }
           if (s == null || t == null) {
               return false;
           }
           if (s.val != t.val) {
               return false;
           }
           return isSame(s.left, t.left) && isSame(s.right, t.right);
       }
   }
   

Py Solution
-----------

.. code-block:: py

   from typing import Optional
   from leetcode.common.py_utils import TreeNode
   
   
   class Solution:
       def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
           def is_same_tree(p, q) -> bool:
               if not p and not q:
                   return True
               if not p or not q:
                   return False
               if p.val != q.val:
                   return False
               return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)
   
           if not root or not subRoot:
               return False
   
           if is_same_tree(root, subRoot):
               return True
   
           return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)
   

