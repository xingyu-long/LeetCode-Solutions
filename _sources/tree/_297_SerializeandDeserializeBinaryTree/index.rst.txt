======================================
 297 Serializeanddeserializebinarytree
======================================

Py Solution
-----------

.. code-block:: py

   from collections import deque
   
   from leetcode.common.py_utils import TreeNode
   
   
   class Codec:
   
       def serialize(self, root):
           """Encodes a tree to a single string.
   
           :type root: TreeNode
           :rtype: str
           """
           if not root:
               return ""
           queue = deque()
           queue.append(root)
           res = []
           while queue:
               size = len(queue)
               for _ in range(size):
                   curr = queue.popleft()
                   if not curr:
                       res.append("#")
                   else:
                       res.append(str(curr.val))
                       queue.append(curr.left)
                       queue.append(curr.right)
           return ",".join(res)
   
       def deserialize(self, data):
           """Decodes your encoded data to tree.
   
           :type data: str
           :rtype: TreeNode
           """
           if len(data) == 0:
               return None
           arr = data.split(",")
           i = 0
           root = TreeNode(int(arr[i]))
           i += 1
           queue = deque()
           queue.append(root)
           while queue and i < len(arr):
               size = len(queue)
               for _ in range(size):
                   curr = queue.popleft()
                   left = arr[i]
                   i += 1
                   right = arr[i]
                   i += 1
                   if left != "#":
                       curr.left = TreeNode(int(left))
                       queue.append(curr.left)
                   if right != "#":
                       curr.right = TreeNode(int(right))
                       queue.append(curr.right)
           return root
   
   
   class Codec2:
   
       def serialize(self, root):
           """Encodes a tree to a single string.
   
           :type root: TreeNode
           :rtype: str
           """
           if not root:
               return "#"
           left = self.serialize(root.left)
           right = self.serialize(root.right)
           return f"{root.val},{left},{right}"
   
       def deserialize(self, data):
           """Decodes your encoded data to tree.
   
           :type data: str
           :rtype: TreeNode
           """
   
           def dfs(queue: deque):
               curr = queue.popleft()
               if curr == "#":
                   return None
               root = TreeNode(int(curr))
               root.left = dfs(queue)
               root.right = dfs(queue)
               return root
   
           if not data:
               return None
           queue = deque(data.split(","))
           return dfs(queue)
   

Java Solution
-------------

.. code-block:: java

   package com.leetcode.tree;
   
   import com.leetcode.common.TreeNode;
   
   import java.util.Arrays;
   import java.util.LinkedList;
   import java.util.Queue;
   
   public class _297_SerializeandDeserializeBinaryTree {
   
       /**
        * 297. Serialize and Deserialize Binary Tree
        * When:2019/7/28, 11/4/2019, 04/07/2020
        * Difficulty: Hard
        *
        * @param root
        * @return
        */
       // 利用queue将其层次遍历出来
       // Encodes a tree to a single string.
       public String serialize(TreeNode root) {
           if (root == null) return "";
           Queue<TreeNode> queue = new LinkedList<>();
           StringBuilder sb = new StringBuilder();
           queue.offer(root);
           while (!queue.isEmpty()) {
               int size = queue.size();
               for (int i = 0; i < size; i++) {
                   TreeNode cur = queue.poll();
                   if (cur == null) {
                       sb.append("null,");
                       continue;
                   }
                   sb.append(cur.val + ",");
                   queue.offer(cur.left);
                   queue.offer(cur.right);
               }
           }
           return sb.toString();
       }
   
       // Decodes your encoded data to tree.
       public static TreeNode deserialize(String data) {
           if (data == null || data.length() == 0) return null;
           String[] strs = data.split(",");
           TreeNode head = new TreeNode(Integer.parseInt(strs[0]));
           Queue<TreeNode> queue = new LinkedList<>();
           int index = 1;
           queue.offer(head);
           while (!queue.isEmpty() && index < strs.length) {
               TreeNode node = queue.poll();
               if (!strs[index].equals("null")) {
                   node.left = new TreeNode(Integer.parseInt(strs[index]));
                   queue.offer(node.left);
               }
               index++;
               if (!strs[index].equals("null")) {
                   node.right = new TreeNode(Integer.parseInt(strs[index]));
                   queue.offer(node.right);
               }
               index++;
           }
           return head;
       }
   
   
       // 利用recursion, preorder
       // Encodes a tree to a single string.
       public String serialize2(TreeNode root) {
           if (root == null) return "#";
           String left = serialize(root.left);
           String right = serialize(root.right);
           return root.val + "," + left + "," + right;
       }
   
       // Decodes your encoded data to tree.
       public TreeNode deserialize2(String data) {
           if (data == null || data.length() == 0) return null;
           String[] strs = data.split(",");
           Queue<String> queue = new LinkedList<>();
           queue.addAll(Arrays.asList(strs));
           return helper(queue);
       }
   
       public TreeNode helper(Queue<String> queue) {
           String str = queue.poll();
           if (str.equals("#")) return null;
           TreeNode newNode = new TreeNode(Integer.parseInt(str));
           newNode.left = helper(queue);
           newNode.right = helper(queue);
           return newNode;
       }
   }
   

